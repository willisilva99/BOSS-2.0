import os
import discord
import random
from discord.ext import commands, tasks
from database import DatabaseManager
from boss import BossBattle
from rank import RankManager

# Obt√©m o token do ambiente Railway
TOKEN = os.getenv('TOKEN')

# Configura√ß√£o dos intents
intents = discord.Intents.default()
intents.message_content = True
intents.members = True  # Necess√°rio para acesso aos membros do servidor

bot = commands.Bot(command_prefix="!", intents=intents)

# Definindo o dicion√°rio de cargos
CARGOS = {
    1: 1300853285858578543,  # Cargo para o 1¬∫ lugar
    2: 1300850877585690655,  # Cargo para o 2¬∫ lugar
    3: 1300854639658270761,  # Cargo para o 3¬∫ lugar
}

class RankManager:
    @staticmethod
    async def update_rankings(bot):
        guild = bot.get_guild(1186390028990025820)  # Substitua pelo ID do seu servidor
        if not guild:
            print("Guild n√£o encontrado.")
            return

        top_players = await DatabaseManager.get_top_players(3)  # Obt√©m o top 3 jogadores

        # Primeiro: Remover cargos antigos de todos os membros com esses cargos
        for member in guild.members:
            for cargo_id in CARGOS.values():
                role = guild.get_role(cargo_id)
                if role in member.roles:
                    await member.remove_roles(role)
                    print(f"Cargo {role.name} removido de {member.display_name}.")

        # Segundo: Adicionar os cargos corretos para o novo top 3
        for i, (user_id, damage) in enumerate(top_players):
            member = guild.get_member(user_id)
            if member:
                cargo_id = CARGOS[i + 1]  # Cargo correspondente √† posi√ß√£o no top 3
                top_role = guild.get_role(cargo_id)

                if top_role not in member.roles:
                    await member.add_roles(top_role)
                    print(f"Cargo {top_role.name} adicionado para {member.display_name}.")
            else:
                print(f"Usu√°rio com ID {user_id} n√£o encontrado no servidor.")

# Definindo a tarefa de atualiza√ß√£o do ranking para rodar a cada 10 minutos
@tasks.loop(minutes=10)
async def update_ranking_task():
    await RankManager.update_rankings(bot)

@bot.event
async def on_ready():
    print(f'{bot.user.name} est√° online!')
    await DatabaseManager.init_db()
    await bot.add_cog(BossBattle(bot))
    update_ranking_task.start()  # Inicia a tarefa de atualiza√ß√£o do ranking a cada 10 minutos

@bot.command()
async def ranking(ctx):
    # Exibe o top 10 do ranking de dano com embed e men√ß√µes aos cargos dos tr√™s primeiros
    top_players = await DatabaseManager.get_top_players(10)
    leaderboard = ""
    
    # Mensagens de parab√©ns para os tr√™s primeiros colocados
    messages = [
        "√© um verdadeiro sobrevivente da Nova Era!",
        "provou ser digno da gl√≥ria apocal√≠ptica!",
        "se destaca entre os fortes nesta Nova Era!",
        "mostrou ser indom√°vel diante do caos!",
        "√© uma lenda viva do apocalipse!"
    ]
    
    for i, (user_id, damage) in enumerate(top_players):
        # Mensagem aleat√≥ria para os tr√™s primeiros
        congrat_message = random.choice(messages)
        
        if i == 0:
            leaderboard += f"ü•á <@{user_id}> - {damage} dano (EXECUTOR BOSS) - {congrat_message}\n"
        elif i == 1:
            leaderboard += f"ü•à <@{user_id}> - {damage} dano (VICIADO EM MORTES) - {congrat_message}\n"
        elif i == 2:
            leaderboard += f"ü•â <@{user_id}> - {damage} dano (SNIPER BOSS) - {congrat_message}\n"
        else:
            leaderboard += f"{i + 1}¬∫ <@{user_id}> - {damage} dano\n"

    embed = discord.Embed(
        title="üìú **A Nova Era do Poder** üìú",
        description="Esses guerreiros se destacam na luta apocal√≠ptica. A Nova Era os coroou com sangue e gl√≥ria.",
        color=discord.Color.dark_red()
    )
    embed.add_field(name="**Ranking de dano**", value=leaderboard, inline=False)
    embed.set_image(url="https://i.postimg.cc/662WxfTL/DALL-E-2024-10-30-17-58-02-Three-survivors-in-a-post-apocalyptic-world-standing-together-with-a-d.webp")
    embed.set_footer(text="Somente os mais fortes sobreviver√£o √† Nova Era.")
    
    await ctx.send(embed=embed)

@bot.command()
async def atualizar_ranking(ctx):
    # For√ßa a atualiza√ß√£o do ranking e cargos (somente para ID autorizado)
    if ctx.author.id == 470628393272999948:  # Verifica se √© o seu ID (substitua pelo seu ID de usu√°rio)
        await RankManager.update_rankings(bot)
        embed = discord.Embed(
            title="‚öîÔ∏è **O Destino Foi Selado** ‚öîÔ∏è",
            description="O ranking foi atualizado. A Nova Era sa√∫da seus novos campe√µes.",
            color=discord.Color.dark_red()
        )
        await ctx.send(embed=embed)
    else:
        await ctx.send("Voc√™ n√£o tem permiss√£o para executar este comando.")

# Inicia o bot com o token do Railway
bot.run(TOKEN)
